[gd_scene load_steps=3 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec4 bg_color: hint_color;
uniform float speed: hint_range(0.0, 1.0, 0.1);

float rand(vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
}

void fragment() {
	float size = 100.0;
	float prob = 0.99;
	vec2 pos = floor(1.0 / size * FRAGCOORD.xy);
	float color = 0.0;
	float starValue = rand(pos);

	if (starValue > prob)
	{
		vec2 center = size * pos + vec2(size, size) * 0.5;
		float t = 0.9 + 0.2 * sin(TIME * 8.0 + (starValue - prob) / (1.0 - prob) * 45.0);
		color = 1.0 - distance(FRAGCOORD.xy, center) / (0.5 * size);
		color = color * t / (abs(FRAGCOORD.y - center.y)) * t / (abs(FRAGCOORD.x - center.x));
	}
	else if (rand(SCREEN_UV.xy / 20.0) > 0.996)
	{
		float r = rand(SCREEN_UV.xy);
		color = r * (0.4 * sin(TIME * (r * 5.0) + 720.0 * r) + 0.95);
	}
	vec4 C = vec4(vec3(color),1.0) + bg_color;
	COLOR = C;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/bg_color = null
shader_param/speed = 0.3

[node name="World" type="Node2D"]

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]

[node name="ParallaxLayer" type="ParallaxLayer" parent="ParallaxBackground"]

[node name="ColorRect" type="ColorRect" parent="ParallaxBackground/ParallaxLayer"]
material = SubResource( 2 )
margin_right = 1280.0
margin_bottom = 720.0
rect_pivot_offset = Vector2( 411, 579 )
color = Color( 0, 0, 0, 1 )

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2( 640, 360 )
smoothing_enabled = true
