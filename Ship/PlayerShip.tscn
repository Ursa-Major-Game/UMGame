[gd_scene load_steps=9 format=2]

[ext_resource path="res://Ship/Ship.tscn" type="PackedScene" id=1]
[ext_resource path="res://Ship/PlayerShip.gd" type="Script" id=2]
[ext_resource path="res://Ship/images/image230.png" type="Texture" id=3]
[ext_resource path="res://Weapons/LaserWeapon01.tscn" type="PackedScene" id=4]
[ext_resource path="res://Weapons/PlasmaWeapon01.tscn" type="PackedScene" id=5]

[sub_resource type="Shader" id=3]
code = "// Hey this is Hei! This shader \"fakes\" a 3D-camera perspective on CanvasItems.
// License: MIT

shader_type canvas_item;

// Camera FOV
uniform float fov : hint_range(1, 179) = 90;
uniform bool cull_back = true;
uniform float y_rot : hint_range(-180, 180) = 0.0;
uniform float x_rot : hint_range(-180, 180) = 0.0;
// At 0, the image retains its size when unrotated.
// At 1, the image is resized so that it can do a full
// rotation without clipping inside its rect.
uniform float inset : hint_range(0, 1) = 0.0;
// Consider changing this to a uniform and changing it from code

varying flat vec2 o;
varying vec3 p;

const float PI = 3.14159;

// Creates rotation matrix
void vertex(){
	float sin_b = sin(y_rot / 180.0 * PI);
	float cos_b = cos(y_rot / 180.0 * PI);
	float sin_c = sin(x_rot / 180.0 * PI);
	float cos_c = cos(x_rot / 180.0 * PI);
	
	mat3 inv_rot_mat;
	inv_rot_mat[0][0] = cos_b;
	inv_rot_mat[0][1] = 0.0;
	inv_rot_mat[0][2] = -sin_b;
	
	inv_rot_mat[1][0] = sin_b * sin_c;
	inv_rot_mat[1][1] = cos_c;
	inv_rot_mat[1][2] = cos_b * sin_c;
	
	inv_rot_mat[2][0] = sin_b * cos_c;
	inv_rot_mat[2][1] = -sin_c;
	inv_rot_mat[2][2] = cos_b * cos_c;
	
	
	float t = tan(fov / 360.0 * PI);
	p = inv_rot_mat * vec3((UV - 0.5), 0.5 / t);
	float v = (0.5 / t) + 0.5;
	p.xy *= v * inv_rot_mat[2].z;
	o = v * inv_rot_mat[2].xy;

	VERTEX += (UV - 0.5) / TEXTURE_PIXEL_SIZE * t * (1.0 - inset);
}

void fragment(){
	if (cull_back && p.z <= 0.0) discard;
	vec2 uv = (p.xy / p.z).xy - o;
    COLOR = texture(TEXTURE, uv + 0.5);
	COLOR.a *= step(max(abs(uv.x), abs(uv.y)), 0.5);
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/fov = 90.0
shader_param/cull_back = true
shader_param/y_rot = 0.0
shader_param/x_rot = 0.0
shader_param/inset = 0.0

[sub_resource type="Animation" id=1]
resource_name = "focus_weapons"
tracks/0/type = "value"
tracks/0/path = NodePath("PrimaryAnchor:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 39, -37 ), Vector2( 23, -61 ), Vector2( 8, -76 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("SecondaryAnchor:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.5, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector2( -42, -36 ), Vector2( -29, -61 ), Vector2( -8, -76 ) ]
}

[node name="PlayerShip" instance=ExtResource( 1 )]
collision_layer = 1
collision_mask = 6
linear_damp = 2.0
script = ExtResource( 2 )
acceleration = 0.2
Primary = ExtResource( 4 )
Secondary = ExtResource( 5 )
toggle_focus = false
thrust = 350
bounciness = 0.5

[node name="Sprite" parent="." index="0"]
material = SubResource( 4 )
texture = ExtResource( 3 )

[node name="AnimationPlayer" parent="." index="1"]
anims/focus_weapons = SubResource( 1 )

[node name="Engine" parent="." index="2"]
position = Vector2( 0, 41 )

[node name="Body" parent="." index="3"]
position = Vector2( 0, 25 )

[node name="Wing1" parent="." index="4"]
position = Vector2( 22, 25 )

[node name="Wing2" parent="." index="5"]
position = Vector2( -22, 25 )

[node name="RespawnTimer" type="Timer" parent="." index="9"]
wait_time = 3.0
one_shot = true

[connection signal="animation_finished" from="AnimationPlayer" to="." method="_on_AnimationPlayer_animation_finished"]
[connection signal="timeout" from="RespawnTimer" to="." method="_on_RespawnTimer_timeout"]
